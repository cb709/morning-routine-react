[
    {
      "_id": "6335da7",
      "name": "How Does React Works?",
      "about": "A react application is made of multiple components, each responsible for rendering a small, reusuable piece of HTML. Components can be nested within other components to allow complex applications to be built out of simple building blocks.  While building react apps, a team of Facebook developers realized that the DOM is slow. So, to make it faster, React implements a virtual DOM that is basically a DOM tree representation in JavaScript. So when it needs to read or write to the DOM, it will use the virtual representation of it. Then the virtual DOM will try to find the most efficient way to update the browser's DOM. Unlike browser DOM elements, React elements are plain objects and are cheap to create. React DOM takes care of updating the DOM to match the React elements. The reason for this is that JavaScript is very fast and it's worth keeping a DOM tree in it to speed up its manipulation. Although React was conceived to be used in the browser, because of its design it can also be used in the server with Node.js."
    },
    {
      "_id": "6335da7bfc",
      "name": "Difference between props and state?",
      "about": "We can pass the data between the components using Props and State. So, let us know how we can pass the data using props and state and understand the difference between the two.\nProps: Props are known as properties it can be used to pass data from one component to another. Props cannot be modified, read-only, and Immutable.\nState:The state represents parts of an Application that can change. Each component can have its State. The state is Mutable and It is local to the component only.\n Props:\n 1)The Data is passed from one component to another.\n2)It is Immutable (cannot be modified).\n3)Props can be used with state and functional components.\nProps are read-only.\nState\n1)The Data is passed within the component only.\n2)It is Mutable ( can be modified).\n3)State can be used only with the state components/class component (Before 16.0).\n4)State is both read and write."
    },
    {
      "_id": "6335da7b4fd8",
      "name": "Usage of UseEffect despite data loading?",
      "about": "The useEffect Hook allows you to perform side effects in your components.Some examples of side effects are: fetching data, directly updating the DOM, and timers.\n UseEffect() Use Cases \n Running once on mount: fetch API data\nRunning on state change: validating input field\nRunning on state change: live filtering\nRunning on state change: trigger animation on new array value\nRunning on props change: update paragraph list on fetched API data update\nRunning on props change: updating fetched API data to get BTC updated price"
    }
  ]